/* 3dvof.c
 *
 * default solver based on VOF and fractional area/volume obstacles
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "vtk.h"
#include "vof.h"
#include "solver.h"
#include "mesh.h"
#include "csv.h"

#ifndef max
    #define max(a,b) ((a) > (b) ? (a) : (b))
#endif
#ifndef min
    #define min(a,b) ((a) < (b) ? (a) : (b))
#endif

/* macros to reduce code needed for access to array elements */
#define U(i, j, k) solver->mesh->u[mesh_index(solver->mesh, i, j, k)]
#define V(i, j, k) solver->mesh->v[mesh_index(solver->mesh, i, j, k)]
#define W(i, j, k) solver->mesh->w[mesh_index(solver->mesh, i, j, k)]
#define UN(i, j, k) mesh_n->u[mesh_index(mesh_n, i, j, k)]
#define VN(i, j, k) mesh_n->v[mesh_index(mesh_n, i, j, k)]
#define WN(i, j, k) mesh_n->w[mesh_index(mesh_n, i, j, k)]
#define P(i, j, k) solver->mesh->P[mesh_index(solver->mesh, i, j, k)]
#define PN(i, j, k) mesh_n->P[mesh_index(mesh_n, i, j, k)]

#define VOF(i, j, k) solver->mesh->vof[mesh_index(solver->mesh, i, j, k)]
#define VOF_N(i, j, k) mesh_n->vof[mesh_index(mesh_n, i, j, k)]
#define N_VOF(i, j, k) solver->mesh->n_vof[mesh_index(solver->mesh, i, j, k)]
#define FV(i, j, k) solver->mesh->fv[mesh_index(solver->mesh, i, j, k)]
#define AE(i, j, k) solver->mesh->ae[mesh_index(solver->mesh, i, j, k)]
#define AN(i, j, k) solver->mesh->an[mesh_index(solver->mesh, i, j, k)]
#define AT(i, j, k) solver->mesh->at[mesh_index(solver->mesh, i, j, k)]

#define PETA(i, j, k) solver->mesh->peta[mesh_index(solver->mesh, i, j, k)]
#define BETA(i, j, k) solver->mesh->beta[mesh_index(solver->mesh, i, j, k)]
#define TANTH(i, j, k) solver->mesh->tanth[mesh_index(solver->mesh, i, j, k)]

#define DELX solver->mesh->delx
#define DELY solver->mesh->dely
#define DELZ solver->mesh->delz
#define RDX solver->mesh->rdx
#define RDY solver->mesh->rdy
#define RDZ solver->mesh->rdz
#define IMAX solver->mesh->imax
#define JMAX solver->mesh->jmax
#define KMAX solver->mesh->kmax

struct mesh_data *mesh_n; /* describes mesh at previous timestep for explicit calcs */

#ifdef DEBUG
float u(struct solver_data *solver, long int i,long int j,long int k);
float u(struct solver_data *solver, long int i,long int j,long int k) { return U(i,j,k); }
float v(struct solver_data *solver, long int i,long int j,long int k);
float v(struct solver_data *solver, long int i,long int j,long int k) { return V(i,j,k); }
float w(struct solver_data *solver, long int i,long int j,long int k);
float w(struct solver_data *solver, long int i,long int j,long int k) { return W(i,j,k); }
float un(struct solver_data *solver, long int i,long int j,long int k);
float un(struct solver_data *solver, long int i,long int j,long int k) { return UN(i,j,k); }
float vn(struct solver_data *solver, long int i,long int j,long int k);
float vn(struct solver_data *solver, long int i,long int j,long int k) { return VN(i,j,k); }
float wn(struct solver_data *solver, long int i,long int j,long int k);
float wn(struct solver_data *solver, long int i,long int j,long int k) { return WN(i,j,k); }
float p(struct solver_data *solver, long int i,long int j,long int k);
float p(struct solver_data *solver, long int i,long int j,long int k) { return P(i,j,k); }
float vof(struct solver_data *solver, long int i,long int j,long int k);
float vof(struct solver_data *solver, long int i,long int j,long int k) { return VOF(i,j,k); }
float n_vof(struct solver_data *solver, long int i,long int j,long int k);
float n_vof(struct solver_data *solver, long int i,long int j,long int k) { return N_VOF(i,j,k); }
float ae(struct solver_data *solver, long int i,long int j,long int k);
float ae(struct solver_data *solver, long int i,long int j,long int k) { return AE(i,j,k); }
float an(struct solver_data *solver, long int i,long int j,long int k);
float an(struct solver_data *solver, long int i,long int j,long int k) { return AN(i,j,k); }
float at(struct solver_data *solver, long int i,long int j,long int k);
float at(struct solver_data *solver, long int i,long int j,long int k) { return AT(i,j,k); }
float fv(struct solver_data *solver, long int i,long int j,long int k);
float fv(struct solver_data *solver, long int i,long int j,long int k) { return FV(i,j,k); }
#endif


int vof_init_solver(struct solver_data *solver) {

  solver->loop = vof_loop;
  solver->boundaries = vof_boundaries;
  solver->special_boundaries = vof_special_boundaries;
  solver->pressure = vof_pressure;
  solver->velocity = vof_velocity;
  solver->vfconv = vof_vfconv;
  solver->petacal = vof_petacal;
  solver->betacal = vof_betacal;
  solver->deltcal = vof_deltcal;
  solver->write = vof_write;
  solver->output = vof_output;

  return 0;
}

int vof_betacal(struct solver_data *solver) {
  long int i,j,k;
  double abe, abw, abn, abs, abt, abb, xx;

#define emf solver->emf

   for(i=1; i<IMAX-1; i++) {
    for(j=1; j<JMAX-1; j++) {
      for(k=1; k<KMAX-1; k++) {

        if(FV(i,j,k) < emf) continue;

        abe = AE(i,j,k);
        abw = AE(i-1,j,k);
        abn = AN(i,j,k);
        abs = AN(i,j-1,k);
        abt = AT(i,j,k);
        abb = AT(i,j,k-1);

        xx = 2.0 * solver->delt * ( RDX * ( abe * RDX * 0.5 + abw * RDX * 0.5) +
                                    RDY * ( abn * RDY * 0.5 + abs * RDY * 0.5) +
                                    RDZ * ( abt * RDZ * 0.5 + abb * RDZ * 0.5));

        xx = xx / FV(i,j,k);
        BETA(i,j,k) = solver->omg / xx;

      }
    }
  } 

#undef emf

  return 0;
}

int vof_petacal(struct solver_data *solver) {
  long int i,j,k,l,m,n,ii,jj,kk;
  int mobs, inf, infcr, iobs;
  double vf, fxm, fxp, fym, fyp, fzm, fzp; 
  double vfxm, vfxp, vfym, vfyp, vfzm, vfzp;
  double dmx, dmin, amn, bpd, dd, sdis;
  enum cell_boundaries N_VOF_F;

#define emf solver->emf
#define emf_c solver->emf_c
 
  for(i=0; i<IMAX; i++) {
    for(j=0; j<JMAX; j++) {
      for(k=0; k<KMAX; k++) {
        PETA(i,j,k) = 1.0;
        N_VOF(i,j,k) = none;
        if(i==0 || j==0 || k==0 || i==IMAX-1 || j==JMAX-1 || k==KMAX-1 || FV(i,j,k) == 0)
          N_VOF(i,j,k) = 0;
        else {
          PETA(i,j,k) = 1.0;
          N_VOF(i,j,k) = none;
        }
      }
    }
  }
 
  for(i=1; i<IMAX-1; i++) {
    for(j=1; j<JMAX-1; j++) {
      for(k=1; k<KMAX-1; k++) {

        /*# first consider all the loop exit conditions*/
        if(FV(i,j,k) == 0) {
          N_VOF(i,j,k) = 0;
          continue;
        }

        if(VOF(i,j,k) < emf) {
          N_VOF(i,j,k) = 8;
          continue;
        }
  
        if(VOF(i,j,k) > emf_c) {
          N_VOF(i,j,k) = 0;
          continue;
        }

        if(VOF(i+1,j,k) >= emf && VOF(i,j+1,k) >= emf 
          && VOF(i-1,j,k) >= emf && VOF(i,j-1,k) >= emf
          && VOF(i,j,k+1) >= emf && VOF(i,j,k-1) >= emf) {
          N_VOF(i,j,k) = 0;
          continue; /* # this is the case where the fluid is not part of a free surf */
        }

        /*# now calculate the partial derivatives of F
        # this code calculates how much F changes in each axis
        # the goal is to determine where the free surface lies
        # and the slope of the free surface */
               
               fxm=VOF(i,j,k);
               fxp=VOF(i,j,k);
               fym=VOF(i,j,k);
               fyp=VOF(i,j,k);
               fzm=VOF(i,j,k);
               fzp=VOF(i,j,k);

               if (AE(i-1,j,k)>emf) fxm=VOF(i-1,j,k);
               if (AE(i,j,k)>emf)   fxp=VOF(i+1,j,k);

               if (AN(i,j-1,k)>emf) fym=VOF(i,j-1,k);
               if (AN(i,j,k)>emf)   fyp=VOF(i,j+1,k);

               if (AT(i,j,k-1)>emf) fzm=VOF(i,j,k-1);
               if (AT(i,j,k)>emf)   fzp=VOF(i,j,k+1);

               mobs=1;
               inf=1;
               iobs=1;
               vf=0.0;

               vfxm=0.0;
               vfxp=0.0;

               for (kk=1;kk<4;kk++)
                {
                  n=k-2+kk;
                  for (jj=1;jj<4;jj++)
                    {
                       m=j-2+jj;
                       vfxm=vfxm+VOF(i-1,m,n);
                       vfxp=vfxp+VOF(i+1,m,n);
                    }
                }

               if (FV(i-1,j,k)==0.0) iobs=2;
               mobs=mobs+(iobs-1);
               if ((iobs!=2)&&(fxm>=emf))
                 {
                    inf=inf+1;
                    if (vfxm>vf) N_VOF(i,j,k)=west;
                    if (N_VOF(i,j,k)==west) vf=vfxm;
                 }

               iobs=1;
               if (FV(i+1,j,k)==0.0) iobs=2;
               mobs=mobs+(iobs-1);
               if ((iobs!=2)&&(fxp>=emf))
                 {
                    inf=inf+1;
                    if (vfxp>vf) N_VOF(i,j,k)=east;
                    if (N_VOF(i,j,k)==east) vf=vfxp;
                 }
               iobs=1;
                                /* z-axis **/
               vfzm=0.0;
               vfzp=0.0;
               for (ii=1;ii<4;ii++)
                 {
                   l=i-2+ii;
                   for (jj=1;jj<4;jj++)
                     {
                       m=j-2+jj;
                       vfzm=vfzm+VOF(l,m,k-1);
                       vfzp=vfzp+VOF(l,m,k+1);
                     }
                 }

               if (FV(i,j,k-1)==0.0) iobs=2;
               mobs=mobs+(iobs-1);
               if ((iobs!=2)&&(fzm>=emf))
                 {
                   inf=inf+1;
                   if (vfzm>vf) N_VOF(i,j,k)=bottom;
                   if (N_VOF(i,j,k)==bottom) vf=vfzm;
                 }
               iobs=1;

               if (FV(i,j,k+1)==0.0) iobs=2;
               mobs=mobs+(iobs-1);
               if ((iobs!=2)&&(fzp>=emf))
                 {
                   inf=inf+1;
                   if (vfzp>vf) N_VOF(i,j,k)=top;
                   if (N_VOF(i,j,k)==top) vf=vfzp;
                 }
               iobs=1;
                                /*y-axis**/

               vfym=0.0;
               vfyp=0.0;

               for (kk=1;kk<4;kk++)
                 {
                   n=k-2+kk;
                   for (ii=1;ii<4;ii++)
                     {
                       l=i-2+ii;
                       vfym=vfym+VOF(i,j-1,n);
                       vfyp=vfyp+VOF(l,j+1,n);
                     }
                 }

               if (FV(i,j-1,k)==0.0) iobs=2;
               mobs=mobs+(iobs-1);
               if ((iobs!=2)&&(fym>=emf))
                 {
                   inf=inf+1;
                   if (vfym>vf) N_VOF(i,j,k)=south;
                   if (N_VOF(i,j,k)==south) vf=vfym;
                 }
               iobs=1;

               if (FV(i,j+1,k)==0.0) iobs=2;
               mobs=mobs+(iobs-1);
               if ((iobs!=2)&&(fyp>=emf))
                 {
                   inf=inf+1;
                   if (vfyp>vf) N_VOF(i,j,k)=north;
                   if (N_VOF(i,j,k)==north) vf=vfyp;
                 }
               iobs=1;

                                    /***/

               /* check if it is not a free surface, but is bounded by an obstacle */
               /* essentially we have fluid in each direction that isn't an obstacle */
               infcr=8-mobs;
               if ((inf==infcr)&&(infcr>1)) N_VOF(i,j,k)=0;

      }
    }
  }

    for (i=1; i<IMAX-1; i++) {
     for (j=1; j<JMAX-1; j++) {
      for (k=1; k<KMAX-1; k++) {
          if ((N_VOF(i,j,k)>0.0)&&(N_VOF(i,j,k)<7)&&(FV(i,j,k)!=0))
          {
           l=i; m=j; n=k;
           switch (N_VOF(i,j,k))
           {
            case west:
              dd=DELX; l=i-1;
            break;

            case east:
             dd=DELX;  l=i+1;
            break;

            case south:
             dd=DELY;  m=j-1;
            break;

            case north:
             dd=DELY;  m=j+1;
            break;

            case bottom:
             dd=DELZ;  n=k-1;
            break;

            case top:
             dd=DELZ;  n=k+1;
            break;

            case none:
              P(i,j,k)=0.1666667*(P(i+1,j,k)+P(i-1,j,k)+
                                    P(i,j+1,k)+P(i,j-1,k)+
                                    P(i,j,k+1)+P(i,j,k-1));
            break; 

          }

           if (N_VOF(i,j,k)!=none)
             {
               sdis=VOF(i,j,k)*dd+VOF(l,m,n)*dd*0.5;
               sdis=max(sdis,0.5*dd);
               PETA(i,j,k)=dd/sdis;

               if ((FV(l,m,n)==0)||(N_VOF(l,m,n)!=0.0)) PETA(i,j,k)=1.0;
               if (PETA(i,j,k)>2.0) PETA(i,j,k)=2.0;
               if (PETA(i,j,k)<0.0) PETA(i,j,k)=0.0;
             }
          }
        }
      }
    }

  for(i=0; i<IMAX-1; i++) {
    for(j=0; j<JMAX-1; j++) {
      for(k=0; k<KMAX-1; k++) {

        N_VOF_F=N_VOF(i,j,k);

        if(N_VOF_F==0 || FV(i,j,k)==0)
          continue;

        if(N_VOF_F>7) {
          P(i,j,k) = 0.0;
          continue;
        }

        l=i;
        m=j;
        n=k;

        switch(N_VOF_F) {
        case west:
          l=i-1;
          dmx=DELX;
          dmin=0.5*(dmx+DELX);
          amn=AE(l,j,k);
          break;

        case east:
          l=i+1;
          dmx=DELX;
          dmin=0.5*(dmx+DELX);
          amn=AE(i,j,k);
          break;

        case south:
          m=j-1;
          dmx=DELY;
          dmin=0.5*(dmx+DELY);
          amn=AN(i,m,k);
          break;

        case north:
          m=j+1;
          dmx=DELY;
          dmin=0.5*(dmx+DELY);
          amn=AN(i,j,k);
          break;

         case bottom:
          n=k-1;
          dmx=DELZ; 
          dmin=0.5*(dmx+DELZ);
          amn=AT(i,j,n);
          break;

        case top:
          n=k+1;
          dmx=DELZ;
          dmin=0.5*(dmx+DELZ);
          amn=AT(i,j,k);
          break;
          
        case none:
          continue;

       }

        if(N_VOF(l,m,n) > 0)
          continue;

        if(amn < emf)
          continue;

        /* calculate relaxation factor and store it in PETA */
        bpd = 1.0 / PETA(l,m,n) - BETA(l,m,n) * (1.0-PETA(i,j,k)) *
              amn / FV(l,m,n) * solver->delt/(dmin*dmx);
        
        PETA(l,m,n) = min(1.98/solver->omg,1.0/bpd);

      }
    }
  }

  return 0;

#undef emf
#undef emf_c
}

int vof_vfconv(struct solver_data *solver) {
  long int i,j,k, ia, iad, id, idm, ja, jad, jd, jdm, ka, kad, kd, kdm;
  double vchg = 0.0;
  double rb, ra, rd, aedm, andm, atdm, vx, vy, vz;
  double fx, fx1, fy, fy1, fz, fz1, fdm;

#define emf solver->emf

  solver->vof_flag = 0;
  
  if(solver->t > 0) {
  /* this code only executes after the first timestep */
    for(i=0; i<IMAX-1; i++) {
      for(j=0; j<JMAX-1; j++) {
        for(k=0; k<KMAX-1; k++) { /* corrected from MAX to MAX-1 6/28/14 */

          if(FV(i,j,k)==0) continue;
          
          vx=U(i,j,k)*solver->delt;
          vy=V(i,j,k)*solver->delt;
          vz=W(i,j,k)*solver->delt;
          
          if(fabs(vx) > 0.5 * DELX || fabs(vy) > 0.5 * DELY || fabs(vz) > 0.5 * DELZ)
            solver->vof_flag = 1;

          if(vx >=0) {
            ia=i+1;
            id=i;
            idm=max(i-1,0);

            aedm = AE(idm,j,k);
          }
          else if(vx < 0) {
            ia=i;
            id=i+1;
            idm=min(i+2,IMAX-1);

            aedm = AE(idm-1,j,k);
          }
          rb = AE(i,j,k);
          ra = FV(ia,j,k);
          rd = FV(id,j,k);

          iad = ia;

          /*
          # the variables are:
          # id = cell we are convecting from (i_donor)
          # ia = cell we are convecting to (i_acceptor)
          # idm = correction to move id inside the mesh if it is on a bdry
          # so idm becomes the cell we are convecting to

          # if the cell we are convecting from has a surface parallel to U */
          if(N_VOF(id,j,k) == south   || N_VOF(id,j,k) == north ||
             N_VOF(id,j,k) == bottom  || N_VOF(id,j,k) == top ) iad = id;
            /* # then we set iad to equal the cell we are convecting from
            # this will effectively make convection = 0 */

          /* # if the acceptor cell is emtpy in the previous timestep
          # or if the donor cell is empty in the previous timestep */
          if(VOF_N(ia,j,k) < emf || VOF_N(idm,j,k) < emf) iad = ia;

          /* # fdm is equal to the maximum donor VOF between idm and id
          # which is just id if we are interior to the mesh */
          fdm = max(VOF_N(idm,j,k), VOF_N(id,j,k));
          if(aedm < emf) fdm = 1.0;

        /*  # fx1 = VOF in the acceptor cell * velocity +
          #       [ (donor VOF - acceptor VOF) * velocity -
          #         (donor VOF - donor VOF) * velocity      ]
          # where the last term in [ ] must be at least 0
          # it is basically equal to the difference in VOF
          # between the donor and acceptor, multiplied by the velocity */

          if(rb > emf) {
            fx1 = VOF_N(iad,j,k)*fabs(vx) + 
                  max((fdm-VOF_N(iad,j,k))*fabs(vx)-(fdm-VOF_N(id,j,k))*DELX, 0.0);
            
          /*  # check - you can't give more than you got
            # also this would mean the timestep is too long */
            fx = min(fx1,VOF_N(id,j,k)*DELX*rd/rb);

          /*  # donor acceptor calc */
            VOF(id,j,k) = VOF(id,j,k) - fx*RDX*(rb/rd);
            VOF(ia,j,k) = VOF(ia,j,k) + fx*RDX*(rb/ra);
          }

          /* repeat the calculation for the y axis */

          if(vy >= 0) {
            ja = j+1;
            jd = j;
            jdm = max(j-1,0);
            andm = AN(i,jdm,k);
          }
          else {
            ja = j;
            jd = j+1;
            jdm = min(j+2,JMAX-1);
            andm = AN(i,jdm-1,k);
          }

          rb = AN(i,j,k);
          ra = FV(i,ja,k);
          rd = FV(i,jd,k);

          jad = ja;

          if(N_VOF(i,jd,k) == west || N_VOF(i,jd,k) == east ||
             N_VOF(i,jd,k) == top  || N_VOF(i,jd,k) == bottom) jad=jd;

          if(VOF_N(i,ja,k) < emf || VOF_N(i,jdm,k) < emf) jad=ja;

          fdm = max(VOF_N(i,jdm,k),VOF_N(i,jd,k));

          if(andm < emf) fdm = 1.0;

          if (rb > emf) {
            fy1 = VOF_N(i,jad,k)*fabs(vy) + 
                  max((fdm-VOF_N(i,jad,k))*fabs(vy)-(fdm-VOF_N(i,jd,k))*DELY,0.0);
            fy  = min(fy1,VOF_N(i,jd,k)*DELY*rd/rb);

            VOF(i,jd,k) = VOF(i,jd,k) - fy*RDY*(rb/rd);
            VOF(i,ja,k) = VOF(i,ja,k) + fy*RDY*(rb/ra);
          } 
          /* repeat the calculation for the z axis */

          if(vz >= 0) {
            ka = k+1;
            kd = k;
            kdm = max(k-1,0);
            atdm = AT(i,j,kdm);
          }
          else {
            ka = k;
            kd = k+1;
            kdm = min(k+2,KMAX-1);
            atdm = AT(i,j,kdm-1);
          }

          rb = AT(i,j,k);
          ra = FV(i,j,ka);
          rd = FV(i,j,kd);

          kad = ka;

          if(N_VOF(i,j,kd) == west   || N_VOF(i,j,kd) == east ||
             N_VOF(i,j,kd) == north  || N_VOF(i,j,kd) == south) kad=kd;

          if(VOF_N(i,j,ka) < emf || VOF_N(i,j,kdm) < emf) kad=ka;

          fdm = max(VOF_N(i,j,kdm),VOF_N(i,j,kd));

          if(atdm < emf) fdm = 1.0;

          if (rb > emf) {
            fz1 = VOF_N(i,j,kad)*fabs(vz) + 
                  max((fdm-VOF_N(i,j,kad))*fabs(vz)-(fdm-VOF_N(i,j,kd))*DELZ,0.0);
            fz  = min(fz1,VOF_N(i,j,kd)*DELZ*rd/rb);

            VOF(i,j,kd) = VOF(i,j,kd) - fz*RDZ*(rb/rd);
            VOF(i,j,ka) = VOF(i,j,ka) + fz*RDZ*(rb/ra);
          }
        }
      }
    }
  } 
  /* # this code executes on any timestep
  # it calculates how much VOF is being lost or gained in the solution */
  for(i=1; i<IMAX-1; i++) {
    for(j=1; j<JMAX-1; j++) {
      for(k=1; k<KMAX-1; k++) {

        if(FV(i,j,k) == 0)
          continue;

        vchg = 0;

        if(VOF(i,j,k) < emf || VOF(i,j,k) > solver->emf_c) {
          /* # this code executes if this cell is not a free surface
          # as a note, this is just the kind of code that could be inlined
          # the potential cases of not being a free surface: */
          if(VOF(i,j,k) < emf) {
            /* # in this case the cell is emtpy */
            vchg=VOF(i,j,k);
            VOF(i,j,k)=0.0;
          }
          else if(VOF(i,j,k) >= solver->emf_c) {
            /*# in this case the cell is full */
            vchg = -(1.0-VOF(i,j,k));
            VOF(i,j,k)=1.0;
          }
        }

        
        solver->vchgt = solver->vchgt + vchg*DELX*DELY*DELZ*FV(i,j,k);
        
        /*# if there is a full cell with an empty cell adjacent
        # that full cell just loses 1.1 * emf of fluid*/
        if(VOF(i,j,k) >= solver->emf_c) {
          if(VOF(i+1,j,k) < emf || VOF(i-1,j,k) < emf ||
             VOF(i,j+1,k) < emf || VOF(i,j-1,k) < emf ||
             VOF(i,j,k+1) < emf || VOF(i,j,k-1) < emf) {

             VOF(i,j,k) = VOF(i,j,k) - 1.1*emf;
             vchg=1.1*emf;

             solver->vchgt = solver->vchgt +vchg*DELX*DELY*DELZ*FV(i,j,k);
          }
        }
      }
    }
  }

  return 0;
#undef emf
}

int vof_special_boundaries(struct solver_data *solver) {
  long int i,j,k;
#define emf solver->emf  
  for(i=0; i<IMAX; i++) {
    for(j=0; j<JMAX; j++) {
      for(k=0; k<KMAX; k++) {
      
        /* code as needed */

        /* lid driven flow U(i,j,KMAX-1) = 1.0; */
        
        /* diagonal duct P(i,JMAX-1,k) = -10.0; */
        
        

      }
    }
  }

  return 0;
#undef emf
}

int vof_boundaries(struct solver_data *solver) {

  long int i,j,k,l,m,n,o,p,q,x;
  int bm[6], bmtot, nindex, flg;
  enum cell_boundaries nff;
#define dim(i,j,k) i+3*(j+k*3)
  const int ndim[3][3] = { {  0,1,1 }, { 1,0,1 }, { 1,1,0 } };
  const int odim[3][3] = { {  1,0,0 }, { 0,1,0 }, { 0,0,1 } };
  double denom;

  for(i=0; i<IMAX; i++) {
    for(j=0; j<JMAX; j++) {
      for(k=0; k<KMAX; k++) {

        for(x=0; x<3; x++) { /* iterate through each axis */

          /* set reference dimenstions as follows:
           * l,m,n: dimensions at reference boundary, based on n
           * o,p,q: dimensions inside the mesh */
          l = ndim[x][0] * i;
          m = ndim[x][1] * j;
          n = ndim[x][2] * k;
          o = l + odim[x][0];
          p = m + odim[x][1];
          q = n + odim[x][2];

          /* this is the west/south/bottom face */
          switch(solver->mesh->wb[x*2]) {
          case slip:
            /* slip case is zero_gradient for parallel axis
             * and zero fixed value for perpendicular axis */
            U(l,m,n) = ndim[x][0] * U(o,p,q);
            V(l,m,n) = ndim[x][1] * V(o,p,q);
            W(l,m,n) = ndim[x][2] * W(o,p,q);
            break;
          case no_slip:
            /* no slip case is velocity = -1.0 * interior velocity at boundary */
            U(l,m,n) = ndim[x][0] * -1.0 * U(o,p,q);
            V(l,m,n) = ndim[x][1] * -1.0 * V(o,p,q);
            W(l,m,n) = ndim[x][2] * -1.0 * W(o,p,q);
            break;
          case zero_gradient:
            /* zero gradient means that velocity at boundary is equal to interior velocity */
            U(l,m,n) = U(o,p,q);
            V(l,m,n) = V(o,p,q);
            W(l,m,n) = W(o,p,q);
            break;
          }

          /* pressure and VOF default to von neumann boundaries
           * and are changed by setting special boundaries */
          P(l,m,n) = P(o,p,q);
          VOF(l,m,n) = VOF(o,p,q);

          /* now set l,m,n,o,p,q similarly for the opposite side of the mesh */
          l += (IMAX-1) * odim[x][0]; 
          m += (JMAX-1) * odim[x][1]; 
          n += (KMAX-1) * odim[x][2];  
          o += (IMAX-3) * odim[x][0]; /* final value is IMAX-2 if odim[n][0] == 1 */
          p += (JMAX-3) * odim[x][1];
          q += (KMAX-3) * odim[x][2];

          /* this is the east/north/top face */
          switch(solver->mesh->wb[x*2 + 1]) {
           case slip:
            /* slip case is zero_gradient for parallel axis
             * and zero fixed value for perpendicular axis */
            U(l,m,n) = ndim[x][0] * U(o,p,q);
            V(l,m,n) = ndim[x][1] * V(o,p,q);
            W(l,m,n) = ndim[x][2] * W(o,p,q);
            if(x==0) U(l-1,m,n) = 0.0;
            if(x==1) V(l,m-1,n) = 0.0;
            if(x==2) W(l,m,n-1) = 0.0;
            break;
          case no_slip:
            /* no slip case is velocity = -1.0 * interior velocity at boundary */
            U(l,m,n) = ndim[x][0] * -1.0 * U(o,p,q);
            V(l,m,n) = ndim[x][1] * -1.0 * V(o,p,q);
            W(l,m,n) = ndim[x][2] * -1.0 * W(o,p,q);
            if(x==0) U(l-1,m,n) = 0.0;
            if(x==1) V(l,m-1,n) = 0.0;
            if(x==2) W(l,m,n-1) = 0.0;
            break;
          case zero_gradient:
            /* zero gradient means that velocity at boundary is equal to interior velocity */
            U(l,m,n) = U(o,p,q);
            V(l,m,n) = V(o,p,q);
            W(l,m,n) = W(o,p,q);
            break;
          }

          /* pressure and VOF default to von neumann boundaries
           * and are changed by setting special boundaries */
          P(l,m,n) = P(o,p,q);
          VOF(l,m,n) = VOF(o,p,q);
        }

      }
    }
  }
        
        
  /* Free surface and sloped boundary conditions */
  for(i=1; i<IMAX-1; i++) {
    for(j=1; j<JMAX-1; j++) {
      for(k=1; k<KMAX-1; k++) {

        if(FV(i,j,k)==0) {
          flg=0;
          bmtot = 0.0;
          N_VOF(i,j,k)=0;
          P(i,j,k)=0;
          
          for(x=0; x<3; x++) {
          
            bm[x*2] = 0;
            l = i + odim[x][0];
            m = j + odim[x][1];
            n = k + odim[x][2];
            
            if(FV(l,m,n) > solver->emf) {
              /* check for free surface, if so, use neighbor cell as basis */
              if(VOF(l,m,n) > solver->emf && VOF(l,m,n) < solver->emf_c) {

                if(N_VOF(l,m,n) == (x+1)*2) /*west/south/bottom*/ {
                  VOF(i,j,k) = 1.0;
                  flg=1;
                }
                else if(N_VOF(l,m,n) == (x*2)+1) /*east/north/top*/ {
                  VOF(i,j,k) = 0.0;
                  flg=1;
                }
                else if(N_VOF(l,m,n) > 0 || N_VOF(l,m,n) < 7) {
                  VOF(i,j,k) = VOF(l,m,n);
                  flg=1;
                }
              }
              bm[x*2]=1;
            }
            if(flg==1) break;
            
            bm[x*2 + 1] = 0;
            l = i - odim[x][0];
            m = j - odim[x][1];
            n = k - odim[x][2];

            if(FV(l,m,n) > 0) {
              /* check for free surface, if so, use neighbor cell as basis */
              if(VOF(l,m,n) > solver->emf && VOF(l,m,n) < solver->emf_c) {

                if(N_VOF(l,m,n) == (x+1)*2) /*west/south/bottom*/ {
                  VOF(i,j,k) = 0.0;
                  flg=1;
                }
                else if(N_VOF(l,m,n) == (x*2)+1) /*east/north/top*/ {
                  VOF(i,j,k) = 1.0;
                  flg=1;
                }
                else if(N_VOF(l,m,n) > 0 || N_VOF(l,m,n) < 7) {
                  VOF(i,j,k) = VOF(l,m,n);
                  flg=1;
                }
              }
              bm[x*2 + 1]=1;
            }                      
            if(flg==1) break;
          
            bmtot += bm[x*2] + bm[x*2 + 1];
          }
          
          if(flg==1) continue;          

          if(bmtot <= 0)
            continue;
          
          VOF(i,j,k) = (bm[0]*VOF(i+1,j,k) + bm[2]*VOF(i,j+1,k) + bm[4]*VOF(i,j,k+1) + 
                        bm[1]*VOF(i-1,j,k) + bm[3]*VOF(i,j-1,k) + bm[5]*VOF(i,j,k-1))/bmtot;
          P(i,j,k)   = (bm[0]*P(i+1,j,k) + bm[2]*P(i,j+1,k) + bm[4]*P(i,j,k+1) + 
                        bm[1]*P(i-1,j,k) + bm[3]*P(i,j-1,k) + bm[5]*P(i,j,k-1))/bmtot;          
          
          continue;
        }

        /* this code creates a von neumann boundary at the fluid surface
        # ( sort of )
        # it solves the continuity equation for each surface cell
        # and uses that to set the value for U and V
        #
        # if two axis are unknown
        # then the velocity is arbitrarily copied from one axis
        # and continuity is used to solve the other axis
        #
        # this leads me to question: if we are forcing continuity in
        # the free surface cell, should we skip the pressure correction? */

        nff = N_VOF(i,j,k);
        if(nff > 0 && nff < 8) { /* code applies to free surface */

          switch(nff) {
          case west:
            if(AE(i,j,k)   > 0 && N_VOF(i+1,j,k) != 0) U(i,  j,k) = U(i-1,j,  k);
            if(AN(i,j,k)   > 0) V(i,  j,k) = V(i-1,j,  k);
            if(AN(i,j-1,k) > 0) V(i,j-1,k) = V(i-1,j-1,k);
            if(AT(i,j,k)   > 0) W(i,j,k  ) = W(i-1,j,  k);
            if(AT(i,j,k-1) > 0) W(i,j,k-1) = W(i-1,j,k-1);
            break;
          case east:
            if(AE(i-1,j,k) > 0 && N_VOF(i-1,j,k) != 0) U(i-1,j,k) = U(i  ,j,  k);
            if(AN(i,j,k)   > 0) V(i,  j,k) = V(i+1,j,  k);
            if(AN(i,j-1,k) > 0) V(i,j-1,k) = V(i+1,j-1,k);
            if(AT(i,j,k)   > 0) W(i,j,k  ) = W(i+1,j,  k);
            if(AT(i,j,k-1) > 0) W(i,j,k-1) = W(i+1,j,k-1);
            break;
          case south:
            if(AE(i,j,k)   > 0) U(i,  j,k) = U(i  ,j-1,k);
            if(AE(i-1,j,k) > 0) U(i-1,j,k) = U(i-1,j-1,k);
            if(AN(i,j,k)   > 0 && N_VOF(i,j+1,k) != 0) V(i,  j,k) = V(i  ,j-1,k);
            if(AT(i,j,k)   > 0) W(i,j,k  ) = W(i,  j-1,k);
            if(AT(i,j,k-1) > 0) W(i,j,k-1) = W(i,  j-1,k-1);
            break;          
          case north:
            if(AE(i,j,k)   > 0) U(i,  j,k) = U(i  ,j+1,k);
            if(AE(i-1,j,k) > 0) U(i-1,j,k) = U(i-1,j+1,k);
            if(AN(i,j-1,k) > 0 && N_VOF(i,j-1,k) != 0) V(i,j-1,k) = V(i  ,j  ,k);
            if(AT(i,j,k)   > 0) W(i,j,k  ) = W(i,  j+1,k);
            if(AT(i,j,k-1) > 0) W(i,j,k-1) = W(i,  j+1,k-1);
            break;  
          case bottom:
            if(AE(i,j,k)   > 0) U(i,  j,k) = U(i  ,j,  k-1);
            if(AE(i-1,j,k) > 0) U(i-1,j,k) = U(i-1,j,  k-1);
            if(AN(i,j,k)   > 0) V(i,  j,k) = V(i  ,j,  k-1);
            if(AN(i,j-1,k) > 0) V(i,j-1,k) = V(i  ,j-1,k-1);
            if(AT(i,j,k)   > 0 && N_VOF(i,j,k+1) != 0) W(i,j,k  ) = W(i  ,j,  k-1);
            break;
          case top:
            if(AE(i,j,k)   > 0) U(i,  j,k) = U(i  ,j,  k+1);
            if(AE(i-1,j,k) > 0) U(i-1,j,k) = U(i-1,j,  k+1);
            if(AN(i,j,k)   > 0) V(i,  j,k) = V(i  ,j,  k+1);
            if(AN(i,j-1,k) > 0) V(i,j-1,k) = V(i  ,j-1,k+1);
            if(AT(i,j,k-1) > 0 && N_VOF(i,j,k-1) != 0) W(i,j,k-1) = W(i  ,j,  k);
            break;
          case none:
            break;
          } 
           
          nindex = 0;
          while(nindex<8) {
            nindex++;

            switch(nff) {
            case west:
              if(N_VOF(i+1,j,k) > 7 && AE(i,j,k) > 0) {
                denom = -1.0 * RDX * AE(i,j,k);
                U(i,j,k) = ( RDX * (-1.0 * U(i-1,j,k) * AE(i-1,j,k))  +
                             RDY * (V(i,j,k) * AN(i,j,k) - V(i,j-1,k) * AN(i,j-1,k)) +
                             RDZ * (W(i,j,k) * AT(i,j,k) - W(i,j,k-1) * AT(i,j,k-1)) ) / denom;
              }
              break;
            case east:
              if(N_VOF(i-1,j,k) > 7 && AE(i-1,j,k) > 0) {
                denom = RDX * AE(i-1,j,k);
                U(i-1,j,k) = ( RDX * (U(i,j,k) * AE(i,j,k)) +
                               RDY * (V(i,j,k) * AN(i,j,k) - V(i,j-1,k) * AN(i,j-1,k)) +
                               RDZ * (W(i,j,k) * AT(i,j,k) - W(i,j,k-1) * AT(i,j,k-1)) ) / denom;
              }
              break;
            case south:
              if(N_VOF(i,j+1,k) > 7 && AN(i,j,k) > 0) {
                denom = -1.0 * RDY * AN(i,j,k);
                V(i,j,k) = ( RDX * (U(i,j,k) * AE(i,j,k) - U(i-1,j,k) * AE(i-1,j,k))  +
                             RDY * (-1.0 * V(i,j-1,k) * AN(i,j-1,k)) +
                             RDZ * (W(i,j,k) * AT(i,j,k) - W(i,j,k-1) * AT(i,j,k-1)) ) / denom;
              }
              break;
            case north:
              if(N_VOF(i,j-1,k) > 7 && AN(i,j-1,k) > 0) {
                denom = RDY * AN(i,j-1,k);
                V(i,j-1,k) = ( RDX * (U(i,j,k) * AE(i,j,k) - U(i-1,j,k) * AE(i-1,j,k)) +
                               RDY * (V(i,j,k) * AN(i,j,k)) +
                               RDZ * (W(i,j,k) * AT(i,j,k) - W(i,j,k-1) * AT(i,j,k-1)) ) / denom;
              }
              break;                
            case bottom:
              if(N_VOF(i,j,k+1) > 7 && AT(i,j,k) > 0) {
                denom = -1.0 * RDZ * AT(i,j,k);
                W(i,j,k) = ( RDX * (U(i,j,k) * AE(i,j,k) - U(i-1,j,k) * AE(i-1,j,k)) +
                             RDY * (V(i,j,k) * AN(i,j,k) - V(i,j-1,k) * AN(i,j-1,k)) +
                             RDZ * (-1.0 * W(i,j,k-1) * AT(i,j,k-1)) ) / denom;
              }
              break;
            case top:
              if(N_VOF(i,j,k-1) > 7 && AN(i,j,k-1) > 0) {
                denom = RDZ * AT(i,j,k-1);
                W(i,j,k-1) = ( RDX * (U(i,j,k) * AE(i,j,k) - U(i-1,j,k) * AE(i-1,j,k)) +
                               RDY * (V(i,j,k) * AN(i,j,k) - V(i,j-1,k) * AN(i,j-1,k)) +
                               RDZ * (W(i,j,k) * AT(i,j,k)) ) / denom;
              }
              break;  
            case none:
              break;               
            }
              
            nff++;
            if(nff>7) nff = 1;
          }
          
#define emf solver->emf

   /* # set velociies in empty cells adjacent to partial fluid cells */
          if(solver->p_flag==0) {
        
            if(VOF(i+1,j,k) < emf) {
              if(VOF(i+1,j+1,k) < emf && AN(i+1,j,k) > emf)
                V(i+1,j,k) = VOF(i,j,k) * V(i,j,k);
              if(VOF(i+1,j-1,k) < emf && AN(i+1,j-1,k) > emf)
                V(i+1,j-1,k) = VOF(i,j,k) * V(i,j-1,k);
              
              if(VOF(i+1,j,k+1) < emf && AT(i+1,j,k) > emf)
                W(i+1,j,k) = VOF(i,j,k) * W(i,j,k);
              if(VOF(i+1,j,k-1) < emf && AT(i+1,j,k-1) > emf)
                W(i+1,j,k-1) = VOF(i,j,k) * W(i,j,k-1);
            }
           
            if(VOF(i-1,j,k) < emf) {
              if(VOF(i-1,j+1,k) < emf && AN(i-1,j,k) > emf)
                V(i-1,j,k) = VOF(i,j,k) * V(i,j,k);
              if(VOF(i-1,j-1,k) < emf && AN(i-1,j-1,k) > emf)
                V(i-1,j-1,k) = VOF(i,j,k) * V(i,j-1,k);
              
              if(VOF(i-1,j,k+1) < emf && AT(i-1,j,k) > emf)
                W(i-1,j,k) = VOF(i,j,k) * W(i,j,k);
              if(VOF(i-1,j,k-1) < emf && AT(i-1,j,k-1) > emf)
                W(i-1,j,k-1) = VOF(i,j,k) * W(i,j,k-1);
            }
                           
            if(VOF(i,j+1,k) < emf) {
              if(VOF(i+1,j+1,k) < emf && AE(i,j+1,k) > emf)
                U(i,j+1,k) = VOF(i,j,k) * U(i,j,k);
              if(VOF(i-1,j+1,k) < emf && AE(i-1,j+1,k) > emf)
                U(i-1,j+1,k) = VOF(i,j,k) * U(i-1,j,k);

              if(VOF(i,j+1,k+1) < emf && AT(i,j+1,k) > emf)
                W(i,j+1,k) = VOF(i,j,k) * W(i,j,k);
              if(VOF(i,j+1,k-1) < emf && AT(i-1,j+1,k) > emf)
                W(i,j+1,k-1) = VOF(i,j,k) * W(i-1,j,k);
            }

            if(VOF(i,j-1,k) < emf)
            {
              if(VOF(i+1,j-1,k) < emf  &&  AE(i,j-1,k) > emf)
                U(i,j-1,k) = VOF(i,j,k) * U(i,j,k);
              if(VOF(i-1,j-1,k) < emf  &&  AE(i-1,j-1,k) > emf)
                U(i-1,j-1,k) = VOF(i,j,k) * U(i-1,j,k);
             
              if(VOF(i,j-1,k+1) < emf  &&  AT(i,j-1,k) > emf)
                W(i,j-1,k) = VOF(i,j,k) * W(i,j,k);
              if(VOF(i,j-1,k-1) < emf  &&  AT(i,j-1,k-1) > emf)
                W(i,j-1,k-1) = VOF(i,j,k) * W(i,j,k-1);    
            
            }
            if(VOF(i,j,k+1) < emf)
            {
              if(VOF(i+1,j,k+1) < emf && AE(i,j,k+1) > emf)
                U(i,j,k+1) = VOF(i,j,k) * U(i,j,k);
              if(VOF(i-1,j,k+1) < emf && AE(i-1,j,k+1) > emf)
                U(i-1,j,k+1) = VOF(i,j,k) * U(i-1,j,k);
              
              if(VOF(i,j+1,k+1) < emf && AN(i,j,k+1) > emf)
                V(i,j,k+1) = VOF(i,j,k) * V(i,j,k);
              if(VOF(i,j-1,k+1) < emf && AN(i,j-1,k+1) > emf)
                V(i,j-1,k+1) = VOF(i,j,k) * V(i,j-1,k);
            }
            if(VOF(i,j,k-1) < emf)
            {
              if(VOF(i+1,j,k-1) < emf && AE(i,j,k-1) > emf)
                U(i,j,k-1) = VOF(i,j,k) * U(i,j,k);
              if(VOF(i-1,j,k-1) < emf && AE(i-1,j,k-1) > emf)
                U(i-1,j,k-1) = VOF(i,j,k) * U(i-1,j,k);
              
              if(VOF(i,j+1,k-1) < emf && AN(i,j,k-1) > emf)
                V(i,j,k-1) = VOF(i,j,k) * V(i,j,k);
              if(VOF(i,j-1,k-1) < emf && AN(i,j-1,k-1) > emf)
                V(i,j-1,k-1) = VOF(i,j,k) * V(i,j-1,k);
            } 
          } 
        }
      }
    }
  }

  return 0;
#undef emf
}

int vof_pressure(struct solver_data *solver) {
  double D=0.0;
  enum cell_boundaries ignore;
  
  long int i,j,k,l,m,n;
  double plmn, delp;
  
  /*enum cell_boundaries nfew, nfee, nfen, nfes, nfet, nfeb, nfe;*/

  solver->p_flag = 0;
  
#define emf solver->emf

  for(i=1; i<IMAX-1; i++) {
    for(j=1; j<JMAX-1; j++) {
      for(k=1; k<KMAX-1; k++) {
        ignore = none; D = 0.0;
        
        if(FV(i,j,k)<emf) continue;

        if(VOF(i,j,k) < emf) continue;
               
        if(N_VOF(i,j,k) != 0) {
          l = i;
          m = j;
          n = k;
          switch(N_VOF(i,j,k)) {
          case east:
            l=i+1;
            if(N_VOF(i-1,j,k) == 0) ignore = west;
            break;
          case west:
            l=i-1;
            if(N_VOF(i+1,j,k) == 0) ignore = east;
            break;
          case north:
            m=j+1;
            if(N_VOF(i,j-1,k) == 0) ignore = south;
            break;
          case south:
            m=j-1;
            if(N_VOF(i,j+1,k) == 0) ignore = north;
            break;
          case top:
            n=k+1;
            if(N_VOF(i,j,k-1) == 0) ignore = bottom;
            break;
          case bottom:
            n=k-1;
            if(N_VOF(i,j,k+1) == 0) ignore = top;
            break;
          case none:
            continue;
          }
         
          /*
          nfew = N_VOF(i-1,j,k);
          nfee = N_VOF(i+1,j,k);
          nfes = N_VOF(i,j-1,k);
          nfen = N_VOF(i,j+1,k);
          nfeb = N_VOF(i,j,k-1);
          nfet = N_VOF(i,j,k+1);

          nfe = fmax(fmax(fmax(nfee,nfew),fmax(nfes,nfen)),fmax(nfeb,nfet));

          * psurf = PS(i,j,k)+PR(nfe); SURFACE PRESSURE CODE NOT WRITTEN */

          /* plm is the fluid pressure normal from the interface */
          plmn = P(l,m,n);

          /* if the neighbor is also a surface cell, then set plm to psurf
           * this is the case for a very small floating droplet */
          if(N_VOF(l,m,n) != 0 && FV(i,j,k) != 0)
            plmn=0; /* psurf */

          /* using the interpolation factor
           * we are setting delp to a mix of surface pressure and
           * internal pressure according to the formula below */
          delp = (1.0-PETA(i,j,k)) * plmn /*+ PETA(i,j,k) * psurf */ - P(i,j,k);

        }
        else {

          D = RDX*(AE(i,j,k)*U(i,j,k)-AE(i-1,j,k)*U(i-1,j,k))+
              RDY*(AN(i,j,k)*V(i,j,k)-AN(i,j-1,k)*V(i,j-1,k))+
              RDZ*(AT(i,j,k)*W(i,j,k)-AT(i,j,k-1)*W(i,j,k-1));
          D = D * solver->rho / FV(i,j,k); 
          delp=-BETA(i,j,k)*D*PETA(i,j,k);
          
          if(fabs(D /solver->dzro) > solver->epsi) 
          {
            solver->p_flag=1;
#ifdef DEBUG
            if(solver->iter > 200 && j>9 && j<11 && solver->iter % 100 == 0) {
              printf("\nCell %ld %ld %ld having trouble with convergence\n",i,j,k);
              printf("P: %lf  PN: %lf  VOF: %lf  delp: %lf D: %lf\n",P(i,j,k),PN(i,j,k),VOF(i,j,k),delp,D);
              printf("N_VOF: %d  PETA: %lf  BETA: %lf\n",N_VOF(i,j,k),PETA(i,j,k),BETA(i,j,k));
              printf("N_N_VOF: east %d west %d north %d south %d top %d bottom %d\n",
                      N_VOF(i+1,j,k), N_VOF(i-1,j,k), N_VOF(i,j+1,k), N_VOF(i,j-1,k),
                      N_VOF(i,j,k+1), N_VOF(i,j,k-1)); 
              printf("U: %lf %lf %lf\n",U(i,j,k),V(i,j,k),W(i,j,k));
              printf("U-1: %lf %lf %lf\n",U(i-1,j,k),V(i,j-1,k),W(i,j,k-1));
              printf("UN: %lf %lf %lf\n\n",UN(i,j,k),VN(i,j,k),WN(i,j,k));     
                if(solver->iter > 1001) {
                  vtk_write_P(solver->mesh,0);
                  vtk_write_U(solver->mesh,0);
                  vtk_write_vof(solver->mesh,0);
                  
              }         
            }
#endif                     
          }

        }
        ignore = none;
        
        P(i,j,k)=P(i,j,k)+delp;
        if(AE(i,j,k) > emf && ignore != east)
          U(i,j,k)=U(i,j,k) + solver->delt * RDX * delp / solver->rho;
        if(AE(i-1,j,k) > emf && ignore != west)
          U(i-1,j,k)=U(i-1,j,k) - solver->delt * RDX * delp / solver->rho;
        if(AN(i,j,k) > emf && ignore != north)
          V(i,j,k)=V(i,j,k) + solver->delt * RDY * delp / solver->rho;
        if(AN(i,j-1,k) > emf && ignore != south)
          V(i,j-1,k)=V(i,j-1,k) - solver->delt * RDY * delp / solver->rho;
        if(AT(i,j,k) > emf && ignore != top)
          W(i,j,k)=W(i,j,k) + solver->delt * RDZ * delp / solver->rho;
        if(AT(i,j,k-1) > emf && ignore != bottom)
          W(i,j,k-1)=W(i,j,k-1) - solver->delt * RDZ * delp / solver->rho;

            if(solver->iter > 200 && j>9 && j<11 && fabs(D/solver->dzro) > solver->epsi && solver->iter % 100 == 0) {
              printf("After correction: P: %lf\n",P(i,j,k));
              printf("U: %lf %lf %lf\n",U(i,j,k),V(i,j,k),W(i,j,k));
              printf("U-1: %lf %lf %lf\n",U(i-1,j,k),V(i,j-1,k),W(i,j,k-1));            
            
            }
        
      }
    }
  }

  return solver->p_flag;
#undef emf
}

int vof_velocity(struct solver_data *solver) {
  double vel[3][27];
  double af[3][27];
  double vis[3];
  double Flux, Viscocity, temp, Q_C, Q_W, H_vel, CD, sum_fv, delp, delv;

  long int i,j,k;
  int n,m,o;

#define dim(i,j,k) i+3*(j+k*3)
  const int pdim[3][3] = { {  2,1,1 }, { 1,2,1 }, { 1,1,2 } };
  const int ndim[3][3] = { {  0,1,1 }, { 1,0,1 }, { 1,1,0 } };
  const int odim[3][3] = { {  1,0,0 }, { 0,1,0 }, { 0,0,1 } };
  int ro_p1, ro_m1, ro_mp1, ro_mm1, ro_nmm1; 
  
  const int ro=dim(1,1,1);

  const double del[3] = { DELX, DELY, DELZ };

  solver->umax = 0;
  solver->vmax = 0;
  solver->wmax = 0;

  for(i=1; i<IMAX-1; i++) {
    for(j=1; j<JMAX-1; j++) {
      for(k=1; k<KMAX-1; k++) {

        /*U(i,j,k) = 0;
        V(i,j,k) = 0;
        W(i,j,k) = 0;*/ 
          
        if (FV(i,j,k) == 0.0) continue;

        for(m=0; m<3; m++) { /* fixed 6/16 from n,m,o */
          for(n=0; n<3; n++) {
            for(o=0; o<3; o++) {
              /* vel[n][i*j*k] and af["]["] define a matrix
               * where n is { U, V, W }
               * and the second dimension represents the values of the scalar in the
               * current cell (i,j,k) and the 8 surrounding cells
               * the current cell is given the location 1,1,1 
               * this caches the data and allows the velocity predictor
               * calcs to be generalized */

              vel[0][dim(m,n,o)] = UN(i-1+m,j-1+n,k-1+o);
              vel[1][dim(m,n,o)] = VN(i-1+m,j-1+n,k-1+o);
              vel[2][dim(m,n,o)] = WN(i-1+m,j-1+n,k-1+o);

              af[0][dim(m,n,o)] = AE(i-1+m,j-1+n,k-1+o);
              af[1][dim(m,n,o)] = AN(i-1+m,j-1+n,k-1+o);
              af[2][dim(m,n,o)] = AT(i-1+m,j-1+n,k-1+o);
            }
          }
        }

        for(n=0; n<3; n++) {

          if(VOF(i,j,k) + VOF(i+odim[n][0],j+odim[n][1],k+odim[n][2]) < solver->emf) {
            switch(n) {
            case 0:
              U(i,j,k) = 0;
              break;
            case 1:
              V(i,j,k) = 0;
              break;
            case 2:
              W(i,j,k) = 0;
              break;
            }        
            continue; 
          }

          /* ro: represents the position 1,1,1 and is the Relative Origin
           * ro_p1: represents the position of the origin plus 1 in the n dimension
           * ro_m1: represents the position of the origin minus 1 in the n dimension
           */
          ro_p1 = dim(pdim[n][0], pdim[n][1], pdim[n][2]);
          ro_m1 = dim(ndim[n][0], ndim[n][1], ndim[n][2]);

          /* cell centered fluxes 
           * this is the first term of the NS equation
           * for example, if n = 0, then this is: u * du/dx */
          Q_C = 0;

          /* Flux from cell centered to the east/north/top */
          H_vel = (vel[n][ro] * af[n][ro] + 
                   vel[n][ro_p1] * af[n][ro_p1]) / 2;

          CD = (vel[n][ro] +
                vel[n][ro_p1]) / 2;
          
          if(af[n][ro_p1] > 0.01)
            Q_C += 2/del[n] * H_vel * (CD - vel[n][ro]);
          
          if(vel[n][ro] >= 0)
            Q_C *= (1-solver->alpha);
          
          
          /* Flux from cell centered to the west/south/bottom */
          H_vel = (vel[n][ro] * af[n][ro] + 
                   vel[n][ro_m1] * af[n][ro_m1]) / 2;

          CD = (vel[n][ro] +
                vel[n][ro_m1]) / 2;

          temp = 0;
          if(af[n][ro_m1] > 0.01)
            temp += 2/del[n] * H_vel * (vel[n][ro] - CD);
 
          if(vel[n][ro] <= 0)
            temp *= (1-solver->alpha);
          
          Q_C += temp;

          /* Viscocity Calculation */
          vis[n] = 0;
          if(af[n][ro_p1] > 0.01) 
            /* the first term is the average of the area fractions
             * the second term is du/dx if n=0 */
            vis[n] += ((af[n][ro]+af[n][ro_p1]) / 2) * (vel[n][ro_p1]-vel[n][ro]);
          if(af[n][ro_m1] > 0.01) 
            vis[n] -= ((af[n][ro]+af[n][ro_m1]) / 2) * (vel[n][ro]-vel[n][ro_m1]);

          /* Wall centered fluxes
           * this is the next two terms in the NS equation
           * for example, if n=0, this is: v du/dy + w du/dz
           */

          Q_W = 0; /* flux from walls */

          for(m=0; m<3; m++) {
            if(m==n) continue;

            /* ro_mp1:
             * for the m dimension, we add 1 to the origin
             * this represents the side of the wall that is outside of the cell i,j,k 
             */

            ro_mp1 = dim(pdim[m][0],pdim[m][1],pdim[m][2]);
            ro_mm1 = dim(ndim[m][0],ndim[m][1],ndim[m][2]);

            /* Flux from wall centered to the east/north/top */
            H_vel = (vel[m][ro]*af[m][ro] +
                     vel[m][ro_p1]*af[m][ro_p1]) / 2;
            if (af[m][ro] < 0.01)
              H_vel = vel[m][ro_p1]*af[m][ro_p1];
            else if (af[m][ro_p1] < 0.01)
              H_vel = vel[m][ro] * af[m][ro];

            CD = (vel[n][ro] + vel[n][ro_mp1])/2;

            temp = 0;
            if ((af[m][ro]>0.01 || af[m][ro_p1]>0.01) && 
                 af[n][ro_mp1]>0.01)
              temp = 2/del[m] * H_vel * (CD - vel[n][ro]);
              
            if(H_vel >= 0)
              temp *= (1-solver->alpha);
              
            Q_W += temp;
            
            /* ro_mm1:
             * for the m dimension, we subract 1 from the origin
             * this represents the side of the wall that is inside the cell i,j,k
             *
             * ro_nmm1:
             * For the n dimension, we add 1
             * for the m dimension, we subtract 1
             * this represents the side of the wall that is outside of the cell i,j,k
             */
            switch(m) {
            case 0:
              ro_nmm1 = dim(0, pdim[n][1], pdim[n][2]);
              break;
            case 1:
              ro_nmm1 = dim(pdim[n][0], 0, pdim[n][2]);
              break;
            case 2:
              ro_nmm1 = dim(pdim[n][0], pdim[n][1], 0);
              break;
            }

            /* Flux from wall centered to the west/south/bottom */
            H_vel = (vel[m][ro_mm1]*af[m][ro_mm1] +
                     vel[m][ro_nmm1]*af[m][ro_nmm1]) / 2;
            if (af[m][ro_mm1] < 0.01)
              H_vel = vel[m][ro_nmm1]*af[m][ro_nmm1];
            else if (af[m][ro_nmm1] < 0.01)
              H_vel = vel[m][ro_mm1] * af[m][ro_mm1];

            CD = (vel[n][ro] + vel[n][ro_mm1])/2;

            temp = 0;
            if ((af[m][ro_mm1]>0.01 || af[m][ro_nmm1]>0.01) &&
                 af[n][ro_mm1]>0.01)
              temp = 2/del[m] * H_vel * (vel[n][ro] - CD);
              
            if(H_vel <= 0)
              temp *= (1-solver->alpha);
            
            Q_W += temp;

            /* Viscocity calc */
            vis[m] = 0;
            if(af[n][ro_mp1] > 0.01)
              vis[m] += ((af[m][ro]+af[m][ro_p1])/2) * (vel[n][ro_mp1] - vel[n][ro]);
            if(af[n][ro_mm1] > 0.01)
              vis[m] -= ((af[m][ro_mm1]+af[m][ro_nmm1])/2) * (vel[n][ro] - vel[n][ro_mm1]);

          }

          sum_fv = (FV(i,j,k) + FV(i+odim[n][0],j+odim[n][1],k+odim[n][2]));
          delp   = (P(i,j,k)  -  P(i+odim[n][0],j+odim[n][1],k+odim[n][2]));

          Flux = (Q_C + Q_W) / sum_fv;
                            
          Viscocity = solver->nu * (vis[0]/pow(del[0],2) + vis[1]/pow(del[1],2) + vis[2]/pow(del[2],2));

          /* deleted from this code 6/18
           * sum_fv/2 * delp: this created discontinuity at pressure boundaries */

          delv = solver->delt * ( /*(sum_fv/2) * */ (1/del[n]) * delp / solver->rho +
                 solver->gx * odim[n][0] + solver->gy * odim[n][1] + solver->gz * odim[n][2] -
                 Flux + Viscocity );

          switch(n) {
          case 0:
            U(i,j,k) = UN(i,j,k) + delv;
            solver->umax = max(fabs(U(i,j,k)),solver->umax);
            break;
          case 1:
            V(i,j,k) = VN(i,j,k) + delv;
            solver->vmax = max(fabs(V(i,j,k)),solver->vmax);
            break;
          case 2:
            W(i,j,k) = WN(i,j,k) + delv;
            solver->wmax = max(fabs(W(i,j,k)),solver->wmax);
            break;
          }
        
        }
      
      }
    }
  }

  return 0;
#undef dim
 }


int vof_loop(struct solver_data *solver) {
  double t_n;


  mesh_n = mesh_init_copy(solver->mesh);
  if(mesh_n == NULL)
    return 1;

  if(solver->petacal != NULL)
    solver->petacal(solver);
  
  solver->boundaries(solver);
  if(solver->special_boundaries != NULL)
    solver->special_boundaries(solver);
  
  if(solver->betacal != NULL)
    solver->betacal(solver);

  /*vof_hydrostatic(solver);*/
  
  mesh_copy_data(mesh_n, solver->mesh);
    
  while(solver->t < solver->endt) {

    solver->delt_n = solver->delt;

    solver->velocity(solver);

    solver->boundaries(solver);
    
    if(solver->special_boundaries != NULL)
      solver->special_boundaries(solver);

    solver->iter = 0;

    while(solver->iter < solver->niter) {
    
      if(solver->pressure(solver) == 0) break;

      if(solver->iter % 100 == 0) {
        if(solver->iter > 1)  {
          solver->delt *= (0.5 + solver->emf);
          solver->betacal(solver);
          printf("timestep temporarily reduced to %lf\n",solver->delt);
          solver->epsi = 0.0001 / solver->delt;
        }
        solver->velocity(solver);
      }        

      solver->boundaries(solver);
      if(solver->special_boundaries != NULL)
        solver->special_boundaries(solver);
    
      solver->iter++;
    }
    t_n = solver->t;
    solver->t += solver->delt;

    solver->boundaries(solver);
    solver->vfconv(solver);
    solver->boundaries(solver);

    if(solver->special_boundaries != NULL)
      solver->special_boundaries(solver);

    solver->output(solver);
    
    if(solver->deltcal(solver) == 0) 
      mesh_copy_data(mesh_n, solver->mesh);
    else 
      solver->t = t_n;

    if(solver->petacal != NULL)
      solver->petacal(solver);
         
    solver->write(solver); 
  }

  return 0;
}

int vof_output(struct solver_data *solver) {
  if(solver->iter >= solver->niter) {
    printf("timestep: %lf (delt %lf) pressure did not converge\n", solver->t, solver->delt);
  }
  else {
    printf("timestep: %lf (delt %lf) convergence in %ld iterations. epsi %lf\n", solver->t, solver->delt, solver->iter, solver->epsi);
  }
  printf("max u, v, w: %lf, %lf, %lf\n",solver->umax,solver->vmax,solver->wmax);  
  
  return 0;
}

int vof_deltcal(struct solver_data *solver) {
  double delt, alpha;
  int ret = 0;
  long int i,j,k;
  const double dtvis = 0.5 * (pow(DELX,2) * pow(DELY,2) * pow(DELZ,2)) / 
                       (solver->nu * (pow(DELX,2) + pow(DELY,2) + pow(DELZ,2)) );
  
  if(solver->t == 0) return 0;
  
  delt = solver->delt_n;
  
  if(solver->vof_flag == 1) {
    delt = solver->delt / 2;
    ret = 1;
  
    for(i=1; i<IMAX-1; i++) {
      for(j=1; j<JMAX-1; j++) {
        for(k=1; k<KMAX-1; k++) {
          U(i,j,k) = 0;
          V(i,j,k) = 0;
          W(i,j,k) = 0;
          P(i,j,k) = PN(i,j,k);
          VOF(i,j,k) = VOF_N(i,j,k);
          
        }
      }
    }
              
  }
  
  if(solver->iter > 45) delt *= 0.98; 
  if(solver->iter < 15) delt *= 1.02; 
  
  delt = min(delt, 0.2 * DELX/solver->umax);
  delt = min(delt, 0.2 * DELY/solver->vmax);
  delt = min(delt, 0.2 * DELZ/solver->wmax);
  delt = min(delt, 0.2 *dtvis);
   
  if(solver->delt_n != delt) {
    printf("timestep adjusted from %lf to %lf\n",solver->delt_n,delt);
    solver->delt = delt;
    solver->betacal(solver);
  }
  
  /* now adjust alpha */
  alpha = solver->alpha;
  alpha = max(alpha, 1.5*solver->umax*solver->delt/DELX);
  alpha = max(alpha, 1.5*solver->vmax*solver->delt/DELY);
  alpha = max(alpha, 1.5*solver->wmax*solver->delt/DELZ);
  printf("alpha adjusted from %lf to %lf\n",solver->alpha, alpha);
  solver->alpha = alpha;
  
  /* adjust epsi */
  /* solver->epsi = solver->epsi * solver->delt / solver->delt_n; */
  solver->epsi = 0.0001 / solver->delt;
  
  
  return ret;
}


int vof_write(struct solver_data *solver) {
  static double write_flg = 0;
  int write_step;
    
  if(solver->t >= write_flg) {
    write_step = (int) (solver->t / solver->writet);
    
    vtk_write_P(solver->mesh,write_step);
    vtk_write_U(solver->mesh,write_step);
    vtk_write_vof(solver->mesh,write_step);
    
    csv_write_P(solver->mesh,solver->t);
    csv_write_U(solver->mesh,solver->t);
    csv_write_vof(solver->mesh,solver->t);
     
    write_flg = solver->t + solver->writet;
  }

  return 0;
}
